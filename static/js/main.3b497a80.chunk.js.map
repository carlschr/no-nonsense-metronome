{"version":3,"sources":["components/Grid.js","components/Button.js","components/Tempo.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","children","className","Button","handleClick","content","onClick","Tempo","handleChange","bpm","type","value","onChange","App","useState","setBpm","waAPI","setup","this","ac","window","AudioContext","webkitAudioContext","buf","createBuffer","sampleRate","channel","getChannelData","duration","amp","phase","i","Math","sin","PI","source","createBufferSource","buffer","loop","loopEnd","connect","destination","start","update","tempo","pause","suspend","unpause","resume","useEffect","checkValue","val","trimNum","num","numArray","toString","split","decimals","newDecimals","length","slice","join","handleSub","newBpm","handleAdd","e","target","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b497a80.chunk.js","sourcesContent":["const Grid = ({children}) => {\r\n    return (\r\n        <div className='Grid'>{children}</div>\r\n    )\r\n}\r\n\r\nexport default Grid;","const Button = ({handleClick, content, className}) => {\r\n    return (\r\n        <button className={className} onClick={handleClick}>{content}</button>\r\n    )\r\n};\r\n\r\nexport default Button;","const Tempo = ({handleChange, bpm}) => {\r\n    return (\r\n        <input type='number' value={bpm} onChange={handleChange} className='tempo'/>\r\n    )\r\n}\r\n\r\nexport default Tempo;","import './css/App.css';\nimport Grid from './components/Grid';\nimport Button from './components/Button';\nimport Tempo from './components/Tempo';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [bpm, setBpm] = useState(120);\n  const [on, setOn] = useState(false);\n\n  const waAPI = {\n    setup() {\n      this.ac = new (window.AudioContext || window.webkitAudioContext)();\n      let buf = this.ac.createBuffer(1, this.ac.sampleRate * 60, this.ac.sampleRate);\n      let channel = buf.getChannelData(0);\n      const duration = this.ac.sampleRate / 50;\n      let amp = 1;\n      let phase = 0;\n      const f = 330;\n      // Loops through duration of wave within sample\n      for (var i = 0; i < duration; i++) {\n        channel[i] = Math.sin(phase) * amp;\n        phase += 2 * Math.PI * f / this.ac.sampleRate;\n        if (phase > 2 * Math.PI) {\n          phase -= 2 * Math.PI;\n        }\n        amp -= 1 / duration;\n      }\n      this.source = this.ac.createBufferSource();\n      this.source.buffer = buf;\n      this.source.loop = true;\n      this.source.loopEnd = 1 / (bpm / 60)\n      this.source.connect(this.ac.destination);\n      this.source.start(0)\n    },\n    update(tempo) {\n      if (this.source) {\n        this.source.loopEnd = 1 / (tempo / 60);\n      }\n    },\n    pause() {\n      this.ac.suspend();\n    },\n    unpause() {\n      this.ac.resume();\n    }\n  }\n\n  // UseEffect\n  useEffect(() => {\n    waAPI.setup();\n  }, [bpm])\n  //\n\n  const handleAudioChange = () => {\n    if (waAPI.ac.state === 'running') {\n      waAPI.pause();\n    } else {\n      waAPI.unpause();\n    }\n  }\n\n  const checkValue = val => {\n    if (!val) {\n      waAPI.pause()\n      setBpm(120);\n      return false;\n    }\n    if (+val > 500) {\n      waAPI.pause()\n      setBpm(500);\n      return false;\n    }\n    if (+val < 1) {\n      waAPI.pause()\n      setBpm(1);\n      return false;\n    }\n    return true;\n  }\n\n  const trimNum = num => {\n    const numArray = num.toString().split('.');\n    const decimals = numArray[1];\n    let newDecimals = '';\n    if (decimals?.length > 3) {\n      newDecimals = decimals.slice(0, 3);\n      return +[numArray[0], newDecimals].join('.');\n    } else if (decimals) {\n      newDecimals = decimals;\n      return +[numArray[0], newDecimals].join('.');\n    } else {\n      return numArray[0];\n    };\n  }\n\n  const handleSub = (num) => {\n    const newBpm = trimNum(+bpm - num);\n    if (!checkValue(newBpm)) return;\n    waAPI.pause();\n    setBpm(newBpm);\n  }\n  const handleAdd = (num) => {\n    const newBpm = trimNum(+bpm + num);\n    if (!checkValue(newBpm)) return;\n    waAPI.pause();\n    setBpm(newBpm);\n  }\n  const handleDiv = () => {\n    const newBpm = trimNum(+bpm / 2);\n    if (!checkValue(newBpm)) return;\n    waAPI.pause();\n    setBpm(newBpm);\n  }\n  const handleMult = () => {\n    const newBpm = trimNum(+bpm * 2);\n    if (!checkValue(newBpm)) return;\n    waAPI.pause();\n    setBpm(newBpm);\n  }\n\n  const handleChange = (e) => {\n    if (!checkValue(e.target.value)) return;\n    const newBpm = trimNum(+e.target.value);\n    waAPI.pause()\n    setBpm(newBpm);\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid>\n        <Tempo handleChange={handleChange} bpm={bpm} />\n        <Button className='toggle' handleClick={() => handleAudioChange()} content='Start/Stop' />\n        <Button className='subOne' handleClick={() => handleSub(1)} content='-1'></Button>\n        <Button className='addOne' handleClick={() => handleAdd(1)} content='+1'></Button>\n        <Button className='subTen' handleClick={() => handleSub(10)} content='-10'></Button>\n        <Button className='addTen' handleClick={() => handleAdd(10)} content='+10'></Button>\n        <Button className='div' handleClick={handleDiv} content='/2'></Button>\n        <Button className='mult' handleClick={handleMult} content='x2'></Button>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}